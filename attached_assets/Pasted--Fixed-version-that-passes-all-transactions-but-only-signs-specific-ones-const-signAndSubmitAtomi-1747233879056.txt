// Fixed version that passes all transactions but only signs specific ones
const signAndSubmitAtomicGroup = async (
  txnsToSign: string[],
  allTxns: string[],
  transactionId: number
): Promise<boolean> => {
  try {
    console.log(`Processing atomic group: ${allTxns.length} total txns, ${txnsToSign.length} to sign`);
    
    // Convert all transactions to Uint8Array format
    const allTxnBinaries: Uint8Array[] = allTxns.map(txn => 
      new Uint8Array(Buffer.from(txn, 'base64'))
    );
    
    // Find which indexes need signing
    const indexesToSign: number[] = [];
    
    for (let i = 0; i < allTxns.length; i++) {
      // Check if this transaction is in the list of transactions to sign
      if (txnsToSign.includes(allTxns[i])) {
        indexesToSign.push(i);
        console.log(`Transaction ${i} needs signing`);
      } else {
        console.log(`Transaction ${i} is pre-signed or doesn't need signing`);
      }
    }
    
    console.log(`Indexes to sign: ${indexesToSign.join(', ')}`);
    
    // Pass ALL transactions to the wallet, but specify which ones to sign
    // The wallet will validate the group and only sign the specified indexes
    const signedTxns = await signTransactions(allTxnBinaries, indexesToSign);
    
    if (!signedTxns || signedTxns.length !== allTxns.length) {
      console.error("Failed to sign transactions properly");
      return false;
    }
    
    // The wallet returns the full array with signed transactions at the specified indexes
    // and null/original values at the pre-signed indexes
    const finalTxns: Uint8Array[] = [];
    
    for (let i = 0; i < signedTxns.length; i++) {
      if (signedTxns[i]) {
        // This was signed by the wallet
        finalTxns.push(signedTxns[i]);
      } else {
        // This was pre-signed or not meant to be signed - use original
        finalTxns.push(allTxnBinaries[i]);
      }
    }
    
    // Submit the atomic group
    const response = await apiRequest("POST", "/api/submit-atomic-group", {
      signedTxns: finalTxns.map(txn => Buffer.from(txn).toString('base64')),
      transactionId
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error("Failed to submit atomic transaction group:", errorData);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Error in atomic transaction group signing:", error);
    
    // Handle specific wallet errors
    if (error instanceof Error) {
      if (error.message.includes("transaction group has failed validation")) {
        toast({
          title: "Transaction Group Error",
          description: "The transactions could not be validated as a group. Please try again.",
          variant: "destructive",
        });
      }
    }
    
    return false;
  }
};